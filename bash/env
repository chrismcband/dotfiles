export EDITOR="mate -w"
#export PATH=/Applications/MAMP/Library/bin:/usr/local/sbin:$PATH
export PATH=~/bin:/usr/local/share/npm/bin:/usr/local/bin:$PATH
#export PATH=/usr/local/mysql/bin:/Applications/MAMP/bin/php/php5.3.29/bin:$PATH
export EC2_HOME=~/.ec2
export EC2_URL=https://eu-west-1.ec2.amazonaws.com/
export PATH=$PATH:/Users/chris/.ec2/bin
export EC2_PRIVATE_KEY=/Users/chris/.ec2/pk-MXC5ZMQLPN46GR3KHQRD5GMCNPB5ETOK.pem
export EC2_CERT=/Users/chris/.ec2/cert-MXC5ZMQLPN46GR3KHQRD5GMCNPB5ETOK.pem
export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home/
export ANDROID_HOME=/Users/chris/Library/Frameworks/android-sdk-macosx
export HOMEBREW_GITHUB_API_TOKEN=f34f3550dac3bee0af1451b38eb2a6874e52c88d
# pip should only run if there is a virtualenv currently activated
export PIP_REQUIRE_VIRTUALENV=true
# cache pip-installed packages to avoid re-downloading
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

# set where virutal environments will live
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
# ensure all new environments are isolated from the site-packages directory
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
# use the same directory for virtualenvs as virtualenvwrapper
export PIP_VIRTUALENV_BASE=$WORKON_HOME
# makes pip detect an active virtualenv and install to it
export PIP_RESPECT_VIRTUALENV=true
if [[ -r /usr/local/bin/virtualenvwrapper.sh ]]; then
    source /usr/local/bin/virtualenvwrapper.sh
else
    echo "WARNING: Can't find virtualenvwrapper.sh"
fi
